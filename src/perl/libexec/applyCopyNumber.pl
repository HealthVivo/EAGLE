#!/usr/bin/env perl

=head1 LICENSE

Copyright (c) 2014 Illumina, Inc.

This file is part of Illumina's Enhanced Artificial Genome Engine (EAGLE),
covered by the "BSD 2-Clause License" (see accompanying LICENSE file)

=head1 NAME

applyCopyNumber.pl

=head1 DIAGNOSTICS

=head2 Exit status

0: successful completion
1: abnormal completion
2: fatal error

=head2 Errors

All error messages are prefixed with "ERROR: ".

=head2 Warnings

All warning messages generated by EAGLE are prefixed with "WARNING: ".

=head1 CONFIGURATION AND ENVIRONMENT

=back

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

All documented features are fully implemented.

Please report problems to Illumina Technical Support (support@illumina.com)

Patches are welcome.

=head1 AUTHOR

Mauricio Varea

=cut

use warnings FATAL => 'all';
use strict;
use Cwd qw(abs_path);
use POSIX qw(strftime);
use File::Spec;
use IO::File;
use Carp;

use Pod::Usage;
use Getopt::Long;
use Data::Dumper;


my $VERSION = '@EAGLE_VERSION_FULL@';
my $DEBUG   = '@EAGLE_DEBUG_MODE@';

# TODO: let 'configure' resolve this
my $SAMTOOLS_install = "/illumina/development/samtools/samtools-0.1.18";
my $samtools = File::Spec->catfile(${SAMTOOLS_install},"samtools");


my $programName = (File::Spec->splitpath(abs_path($0)))[2];
my $programPath = (File::Spec->splitpath(abs_path($0)))[1];
my $Version_text =
    "$programName $VERSION\n"
  . "Copyright (c) 2014 Illumina, Inc.\n";

my $usage =
    "Usage: $programName [options]\n"
  . "\t-i, --input-cnv=PATH         - [input] \t\tpath to the CNV.tab file\n"
  . "\t-o, --output-vcf=PATH        - [output]\t\tpath to the generated VCF file\n"
  . "\t-p, --default-ploidy=NUM     - default ploidy (=1)\n"
  . "\t-g, --sample-genome=PATH     - [input/output] \tpath to the sample genome directory (deprecated option)\n"
  . "\t--help                       - prints usage guide\n"
  . "\t--version                    - prints version information\n"

.<<'EXAMPLES_END';

EXAMPLES:
    (none)

EXAMPLES_END


my $man           = 0;
my $help          = !(scalar @ARGV);
my $version       = 0;
my $sampleGenome  = undef;
my $cnvFile       = undef;
my $vcfFile       = undef;
my $defaultPloidy = 1;

my %options = 
(
    'help'           => \$help,
    'sample-genome'  => \$sampleGenome,
    'input-cnv'      => \$cnvFile,
    'output-vcf'     => \$vcfFile,
    'default-ploidy' => \$defaultPloidy,
    "version"        => \$version,
    'man'            => \$man
);

my $result = GetOptions(\%options, 
                        'help|?', 'input-cnv|i=s', 'output-vcf|o=s', 'default-ploidy|p=i', 'sample-genome|g=s', 'version', 'man')
             or pod2usage(2);

#pod2usage(1)  if $help;  ## move $usage into SYNOPSIS section 
pod2usage(-verbose => 2,  -input => $1) if ($man and $0 =~ /(.*)/);

# display the version info
if ($version) {
    print $Version_text;
    exit(0);
}
# display the help screen
if ($help) {
    print $usage;
    exit(0);
}

if (!defined $cnvFile)
{
    croak "ERROR: *** missing option: --input-cnv ***\n       Type \"$programName --help\" for usage.\n";
}
if (defined $sampleGenome && defined $vcfFile)
{
    croak "ERROR: *** --sample-genome and --output-vcf are mutually exclusive options ***\n       Type \"$programName --help\" for usage.\n";
}
die("ERROR: Unrecognized command-line argument(s): @ARGV")  if (0 < @ARGV);

my $fullCNVfile      = abs_path($cnvFile);
(-e "$fullCNVfile") or croak "ERROR: *** '$fullCNVfile' does not exist ***\n";

my %CopyNumber = ();
my @Inputs = ();
open CNV_IN,"<$fullCNVfile"  or croak "ERROR: *** failed to open '$fullCNVfile' ***\n";
while( <CNV_IN> )
{
    chomp;
    next  if $_ =~ /^#/;
    next  if $_ =~ /^$/;
    my @cnvLine = split('\t');
    croak "ERROR: ${fullCNVfile}:$.: *** Malformed line, there are ".@cnvLine." fields (expected 4) ***\n"
          unless @cnvLine == 4;
    push @{$CopyNumber{$cnvLine[3]}}, ["--position=$cnvLine[0]:$cnvLine[1]", "--size=".($cnvLine[2]-$cnvLine[1]+1)];  # inclusive
    push @Inputs, { chr=>$cnvLine[0], firstPos=>$cnvLine[1], lastPos=>$cnvLine[2], copyNumber=>$cnvLine[3] };
}
close CNV_IN;

print Dumper( \%CopyNumber )  if $DEBUG;

if (defined $sampleGenome)
{
    my $fullSampleGenome      = abs_path($sampleGenome);
    (-d "$fullSampleGenome") or croak "ERROR: *** --sample-genome is not a valid directory ***\n";

    (-e File::Spec->catfile($fullSampleGenome,"genome_size.xml"))
        or croak "ERROR: *** missing 'genome_size.xml' in '$fullSampleGenome' ***\n       Please make --sample-genome point to a valid Sample Genome.\n";
    opendir (DIR, $fullSampleGenome)
         or croak "ERROR: failed to retrieve data from '$fullSampleGenome': $!\n";
    my @fastaFiles = grep !/^CNV/,
                     grep /\.fa(sta)?$/,
                     readdir DIR;
    closedir (DIR);

    foreach (@fastaFiles)
    {
        carp "WARNING: missing index for '$_' in '$fullSampleGenome'.\n"  unless -e File::Spec->catfile($fullSampleGenome, "$_.fai");
    }

    my $fastaDump = File::Spec->catfile($programPath,"fastaDump");
    my ($cn,$params);
    while( ($cn,$params) = each %CopyNumber )
    {
        my $cnvFasta = File::Spec->catfile($fullSampleGenome,"CNV_${cn}.fa");
        (!-e "$cnvFasta")  or croak "ERROR: *** '$cnvFasta' already exists ***\n";
        open CNV_OUT,">$cnvFasta"  or croak "ERROR: *** failed to open '$cnvFasta' ***\n";
        print CNV_OUT ">CNV_${cn}\n";
        my $buffer = "";
        foreach my $param (@$params)
        {
            print "* Debug *:  $fastaDump $fullSampleGenome @$param 2>/dev/null\n"  if $DEBUG;
            open FASTA_DUMP, "$fastaDump $fullSampleGenome @$param 2>/dev/null |";
            while( <FASTA_DUMP> )
            {
                chomp;
                my $dumpLine = $_;
                next  unless defined $dumpLine;
                next  unless $_ =~ /\|/;
                if( $dumpLine =~ /^.*\|(\s+)(\w+)(\s*)$/ )
                {
                    $buffer .= $2;
                    if( length($buffer) >= 70 )
                    {
                        my $fastaLine = substr($buffer,0,70);
                        $buffer       = substr($buffer,70);
                        print CNV_OUT "$fastaLine\n";
                    }
                } else {
                    croak "ERROR: *** unrecognizable data from fastaDump ***\n       ${dumpLine}\n";
                }
                croak "ERROR: *** buffer has too much data (iter #$.) ***\n       ${buffer}\n"  unless length($buffer) < 70;
            }
            close FASTA_DUMP;
        }
        print CNV_OUT "$buffer\n"  if length($buffer);
        close CNV_OUT;
        system( "${samtools} faidx \"${cnvFasta}\"" );
        croak "ERROR: *** could not create FASTA index for '$cnvFasta' ***\n"  if $?;
    }
    print "Successfully writen ".keys(%CopyNumber)." files!\n";
} 
elsif (defined $vcfFile)
{
    my $fullVCFfile        = abs_path($vcfFile);
    (! -e "$fullVCFfile") or croak "ERROR: *** '$fullVCFfile' already exists ***\n";

    open VCF_OUT,">$vcfFile"  or croak "ERROR: *** failed to open '$vcfFile' ***\n";
    print VCF_OUT "# Default ploidy is $defaultPloidy\n";
    for my $input (@Inputs)
    {
        print VCF_OUT "# CN=$input->{copyNumber} $input->{chr}:$input->{firstPos}-$input->{lastPos}\n";

        my $repeat = $input->{copyNumber} - $defaultPloidy;
        if ($repeat > 0)
        {
            for (my $i=0; $i<$repeat; $i++)
            {
                print VCF_OUT "$input->{chr}	$input->{lastPos}	.	A	A\[$input->{chr}:$input->{firstPos}\[	0	PASS	SVTYPE=DUP\n";
                print VCF_OUT "$input->{chr}	$input->{firstPos}	.	A	]$input->{chr}:$input->{lastPos}]A	0	PASS	SVTYPE=DUP\n";
            }
        }
        elsif ($repeat < 0)
        {
            for (my $i=0; $i>$repeat; $i--)
            {
                print VCF_OUT "$input->{chr}	$input->{firstPos}	.	A	A\[$input->{chr}:$input->{lastPos}\[	0	PASS	SVTYPE=DEL\n";
                print VCF_OUT "$input->{chr}	$input->{lastPos}	.	T	]$input->{chr}:$input->{firstPos}]T	0	PASS	SVTYPE=DEL\n";
            }
        }
        else
        {
            print VCF_OUT "# No variant needed, as ploidy == default-ploidy\n";
        }
    }
    close VCF_OUT;
    print "Successfully writen $vcfFile\n";
}
else
{
    croak "ERROR: *** missing option: either --sample-genome or --output-vcf ***\n       Type \"$programName --help\" for usage.\n";
}

