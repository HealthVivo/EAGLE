#!/usr/bin/env perl

=head1 LICENSE

Copyright (c) 2014 Illumina, Inc.

This file is part of Illumina's Enhanced Artificial Genome Engine (EAGLE),
covered by the "BSD 2-Clause License" (see accompanying LICENSE file)

=head1 NAME

mergeSampleGenomes.pl

=head1 DIAGNOSTICS

=head2 Exit status

0: successful completion
1: abnormal completion
2: fatal error

=head2 Errors

All error messages are prefixed with "ERROR: ".

=head2 Warnings

All warning messages generated by EAGLE are prefixed with "WARNING: ".

=head1 CONFIGURATION AND ENVIRONMENT

=back

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

All documented features are fully implemented.

Please report problems to Illumina Technical Support (support@illumina.com)

Patches are welcome.

=head1 AUTHOR

Lilian Janin

=cut

use warnings FATAL => 'all';
use strict;
use Cwd qw(abs_path);
use POSIX qw(strftime);
use IO::File;
use Carp;

use Pod::Usage;
use Getopt::Long;


my $VERSION = '@EAGLE_VERSION_FULL@';

my $programName = (File::Spec->splitpath(abs_path($0)))[2];
my $programPath = (File::Spec->splitpath(abs_path($0)))[1];
my $Version_text =
    "$programName $VERSION\n"
  . "Copyright (c) 2014 Illumina, Inc.\n";

my $usage =
    "Usage: $programName [options]\n"
  . "\t-i, --dataset1=PATH          - 1st sample dataset directory\n"
  . "\t-j, --dataset2=PATH          - 2nd sample dataset directory\n"
  . "\t-o, --out-genome=PATH       - output directory to create\n"

  . "\t--help                       - prints usage guide\n"
  . "\t--version                    - prints version information\n"

.<<'EXAMPLES_END';

EXAMPLES:
    (none)

EXAMPLES_END

my $help             = 'nohelp';
my $isVersion        = 0;
my %PARAMS           = ();

my $argvStr = join ' ', @ARGV;

$PARAMS{verbose} = 0;

$PARAMS{dataset1} = "";
$PARAMS{dataset2} = "";
$PARAMS{outDir} = ".";

my $result = GetOptions(
    "dataset1|i=s"          => \$PARAMS{dataset1},
    "dataset2|j=s"          => \$PARAMS{dataset2},
    "out-genome|o=s"       => \$PARAMS{outDir},

    "version"               => \$isVersion,
    "help"                  => \$help
);

# display the version info
if ($isVersion) {
    print $Version_text;
    exit(0);
}

my $fullDataset1 = abs_path($PARAMS{dataset1});
my $fullDataset2 = abs_path($PARAMS{dataset2});


# display the help text when no output directory or other required options are given
if ( ( $result == 0 || !$PARAMS{dataset1} || !$PARAMS{dataset2} || !$PARAMS{outDir} ) && 'nohelp' eq $help) {
    die "$usage";
}

die("ERROR: Unrecognized command-line argument(s): @ARGV")  if (0 < @ARGV);


# Check that we won't overwrite any existing file
my $sampleOutDir="$PARAMS{outDir}/sample_genome";
(! -e "${sampleOutDir}") or die "${sampleOutDir} already exists. Aborting.";

system( "mkdir -p \"${sampleOutDir}\"" );

system( "head -n -1 $PARAMS{dataset1}/sample_genome/genome_size.xml >  ${sampleOutDir}/genome_size.xml" );
system( "tail -n +3 $PARAMS{dataset2}/sample_genome/genome_size.xml >> ${sampleOutDir}/genome_size.xml" );

system( "for i in \"$fullDataset1/sample_genome/*.fa*\"; do ln -s \$i ${sampleOutDir}/; done" );
system( "for i in \"$fullDataset2/sample_genome/*.fa*\"; do ln -s \$i ${sampleOutDir}/; done" );

print "Sample genomes successfully merged\n";
